<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ycw&#39; blogs</title>
  
  <subtitle>发型不能乱</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-01-06T06:31:03.692Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>ycw</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JAVA基础</title>
    <link href="http://yoursite.com/2020/01/06/JAVA-basic/"/>
    <id>http://yoursite.com/2020/01/06/JAVA-basic/</id>
    <published>2020-01-06T06:16:28.000Z</published>
    <updated>2020-01-06T06:31:03.692Z</updated>
    
    <summary type="html">
    
      Java基础知识
    
    </summary>
    
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络</title>
    <link href="http://yoursite.com/2020/01/06/Network/"/>
    <id>http://yoursite.com/2020/01/06/Network/</id>
    <published>2020-01-06T06:12:02.000Z</published>
    <updated>2020-01-06T06:31:28.717Z</updated>
    
    <summary type="html">
    
      计算机网络
    
    </summary>
    
    
    
      <category term="后端" scheme="http://yoursite.com/tags/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="经验" scheme="http://yoursite.com/tags/%E7%BB%8F%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>tmall_springboot</title>
    <link href="http://yoursite.com/2019/12/24/tmall-springboot/"/>
    <id>http://yoursite.com/2019/12/24/tmall-springboot/</id>
    <published>2019-12-24T01:10:08.000Z</published>
    <updated>2019-12-26T01:42:20.766Z</updated>
    
    <content type="html"><![CDATA[<h3 id="spring-boot实现天猫前端和后台管理"><a href="#spring-boot实现天猫前端和后台管理" class="headerlink" title="spring boot实现天猫前端和后台管理"></a>spring boot实现天猫前端和后台管理</h3><hr><h4 id="选用技术"><a href="#选用技术" class="headerlink" title="选用技术"></a>选用技术</h4><ol><li>Java</li><li>前端：html, CSS, Javascript, JSON, AJAX, JQuery ,Bootstrap, Vue.js </li><li>框架：spring springMVC spring boot</li><li>中间件： redis,nginx,elasticsearch,shiro</li><li>数据库：MySQL</li><li>开发工具：idea,maven</li></ol><hr><h4 id="需求分析-前台"><a href="#需求分析-前台" class="headerlink" title="需求分析-前台"></a>需求分析-前台</h4><ol><li><p>首页<br>（1）在横向导航栏上提供4个分类连接<br>（2）在纵向导航栏上提供全部17个分类连接<br>（3）当鼠标移动到某一个纵向分类连接的时候，显示这个分类下的推荐商品<br>（4）按照每种分类显示5个商品的方式，显示所有17种分类    </p></li><li><p>分类页<br>（1）显示分辨率为950x100的当前分类图片<br>（2）显示本分类下的所有产品    </p></li><li><p>查询结果页<br>显示满足查询条件的商品</p></li><li><p>产品页<br>（1）显示分辨率为950x100的当前商品对应的分类图片<br>（2）显示本商品的5个单独图片<br>（3）商品的基本信息，如标题，小标题，价格，销量，评价数量，库存等<br>（4）商品详情<br>（5）评价信息<br>（6）5张商品详细图片</p></li><li><p>结算页面<br>在结算页面显示被选中的订单项</p></li><li><p>支付页面<br>确认支付页面显示本次订单的金额总数</p></li><li><p>支付成功页面<br>付款成功时，显示本次付款金额</p></li><li><p>购物车页面<br>在购物车中显示订单项</p></li><li><p>我的订单页面<br>显示所有订单，以及对应的订单项</p></li><li><p>确认收货页面<br>（1）显示订单项内容<br>（2）显示订单信息，收货人地址等    </p></li><li><p>确认收货成功页面</p></li><li><p>进行评论页面<br>（1）显示要评价的商品信息，商品当前的总评价数<br>（2）评价成功后，显示当前商品所有的评价信息    </p></li><li><p>登陆页面</p></li><li><p>注册页面</p></li></ol><hr><h4 id="需求分析后台-后台"><a href="#需求分析后台-后台" class="headerlink" title="需求分析后台-后台"></a>需求分析后台-后台</h4><ol><li>分类管理</li><li>分类属性管理</li><li>产品管理</li><li>产品属性设置</li><li>产品图片管理</li><li>用户管理</li><li>订单管理</li></ol><hr><h4 id="数据库表设计"><a href="#数据库表设计" class="headerlink" title="数据库表设计"></a>数据库表设计</h4><ol><li>创建数据库</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DROP DATABASE IF EXISTS tmall_springboot;</span><br><span class="line">CREATE DATABASE tmall_springboot DEFAULT CHARACTER SET UTF0;</span><br></pre></td></tr></table></figure><ol start="2"><li>表设计</li></ol><table><thead><tr><th>表名</th><th align="center">中文含义</th><th align="right">介绍</th></tr></thead><tbody><tr><td>Category</td><td align="center">分类表</td><td align="right">存放分类信息，如女装，平板电视，沙发等</td></tr><tr><td>Property</td><td align="center">属性表</td><td align="right">放属性信息，如颜色，重量，品牌，厂商，型号等</td></tr><tr><td>Product</td><td align="center">产品表</td><td align="right">存放产品信息，如LED40EC平板电视机，海尔EC6005热水器</td></tr><tr><td>PropertyValue</td><td align="center">属性值表</td><td align="right">存放属性值信息，如重量是900g,颜色是粉红色</td></tr><tr><td>ProductImage</td><td align="center">产品图片表</td><td align="right">存放产品图片信息，如产品页显示的5个图片</td></tr><tr><td>Review</td><td align="center">评论表</td><td align="right">存放评论信息，如买回来的蜡烛很好用，么么哒</td></tr><tr><td>User</td><td align="center">用户表</td><td align="right">存放用户信息，如斩手狗，千手小粉红</td></tr><tr><td>Order</td><td align="center">订单表</td><td align="right">存放订单信息，包括邮寄地址，电话号码等信息</td></tr><tr><td>OrderItem</td><td align="center">订单项表</td><td align="right">存放订单项信息，包括购买产品种类，数量等</td></tr></tbody></table><ol start="3"><li>表关系</li></ol><table><thead><tr><th>一</th><th align="left">多</th></tr></thead><tbody><tr><td>Category-分类</td><td align="left">Product-产品</td></tr><tr><td>Category-分类</td><td align="left">Property-属性</td></tr><tr><td>Property-属性</td><td align="left">PropertyValue-属性值</td></tr><tr><td>Product-产品</td><td align="left">PropertyValue-属性值</td></tr><tr><td>Product-产品</td><td align="left">ProductImage-产品图片</td></tr><tr><td>Product-产品</td><td align="left">Review-评价</td></tr><tr><td>Product-产品</td><td align="left">OrderItem-订单项</td></tr><tr><td>User-用户</td><td align="left">Order-订单</td></tr><tr><td>User-用户</td><td align="left">OrderItem-订单项</td></tr><tr><td>Order-订单</td><td align="left">OrderItem-订单项</td></tr><tr><td>User-用户</td><td align="left">Review-评价</td></tr></tbody></table><ol start="4"><li>用户表</li></ol><p>salt是盐，用来和shiro结合的时候，加密用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE USER(</span><br><span class="line">id int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">name varchar(255) DEFAULT NULL,</span><br><span class="line">password varchar(255) DEFAULT NULL,</span><br><span class="line">salt varchar(255) DEFAULT NULL,</span><br><span class="line">PRIMARY KEY(id)</span><br><span class="line">) ENGINE &#x3D; InnoDB DEFAULT CHARSET&#x3D;utf8;</span><br></pre></td></tr></table></figure><ol start="5"><li>分类表</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE category (</span><br><span class="line">  id int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  name varchar(255) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (id)</span><br><span class="line">) ENGINE&#x3D;InnoDB  DEFAULT CHARSET&#x3D;utf8;</span><br></pre></td></tr></table></figure><ol start="6"><li>属性表<br>本表的外键cid，指向分类表的id字段</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE property (</span><br><span class="line">  id int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  cid int(11) DEFAULT NULL,</span><br><span class="line">  name varchar(255) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (id),</span><br><span class="line">  CONSTRAINT fk_property_category FOREIGN KEY (cid) REFERENCES category(id)</span><br><span class="line">  ) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8;</span><br></pre></td></tr></table></figure><ol start="7"><li>产品表</li></ol><p>name: 产品名称<br>subTitle: 小标题<br>originalPrice: 原始价格<br>promotePrice: 优惠价格<br>stock: 库存<br>createDate: 创建日期</p><p>本表的外键cid，指向分类表的id字段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">REATE TABLE product (</span><br><span class="line">  id int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  name varchar(255) DEFAULT NULL,</span><br><span class="line">  subTitle varchar(255) DEFAULT NULL,</span><br><span class="line">  originalPrice float DEFAULT NULL,</span><br><span class="line">  promotePrice float DEFAULT NULL,</span><br><span class="line">  stock int(11) DEFAULT NULL,</span><br><span class="line">  cid int(11) DEFAULT NULL,</span><br><span class="line">  createDate datetime DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (id),</span><br><span class="line">  CONSTRAINT fk_product_category FOREIGN KEY (cid) REFERENCES category (id)</span><br><span class="line">) ENGINE&#x3D;InnoDB  DEFAULT CHARSET&#x3D;utf8;</span><br></pre></td></tr></table></figure><ol start="8"><li>属性值表</li></ol><p>本表有两个外键<br>外键ptid，指向属性表的id字段<br>外键pid，指向产品表的id字段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE propertyvalue (</span><br><span class="line">  id int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  pid int(11) DEFAULT NULL,</span><br><span class="line">  ptid int(11) DEFAULT NULL,</span><br><span class="line">  value varchar(255) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (id),</span><br><span class="line">  CONSTRAINT fk_propertyvalue_property FOREIGN KEY (ptid) REFERENCES property (id),</span><br><span class="line">  CONSTRAINT fk_propertyvalue_product FOREIGN KEY (pid) REFERENCES product (id)</span><br><span class="line">) ENGINE&#x3D;InnoDB  DEFAULT CHARSET&#x3D;utf8;</span><br></pre></td></tr></table></figure><ol start="9"><li>产品图片表</li></ol><p>type表示类型，产品图片分单个图片和详情图片两种</p><p>本表的外键pid，指向产品表的id字段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE productimage (</span><br><span class="line">  id int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  pid int(11) DEFAULT NULL,</span><br><span class="line">  type varchar(255) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (id),</span><br><span class="line">  CONSTRAINT fk_productimage_product FOREIGN KEY (pid) REFERENCES product (id)</span><br><span class="line">) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8;</span><br></pre></td></tr></table></figure><ol start="10"><li>评价表</li></ol><p>外键pid，指向产品表的id字段<br>外键uid，指向用户表的id字段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE review (</span><br><span class="line">  id int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  content varchar(4000) DEFAULT NULL,</span><br><span class="line">  uid int(11) DEFAULT NULL,</span><br><span class="line">  pid int(11) DEFAULT NULL,</span><br><span class="line">  createDate datetime DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (id),</span><br><span class="line">  CONSTRAINT fk_review_product FOREIGN KEY (pid) REFERENCES product (id),</span><br><span class="line">    CONSTRAINT fk_review_user FOREIGN KEY (uid) REFERENCES user (id)</span><br><span class="line">) ENGINE&#x3D;InnoDB  DEFAULT CHARSET&#x3D;utf8;</span><br></pre></td></tr></table></figure><ol start="11"><li>订单表</li></ol><p>orderCode： 订单号<br>address:收货地址<br>post: 邮编<br>receiver: 收货人信息<br>mobile: 手机号码<br>userMessage: 用户备注信息<br>createDate: 订单创建日期<br>payDate: 支付日期<br>deliveryDate: 发货日期<br>confirmDate：确认收货日期<br>status: 订单状态<br>外键uid，指向用户表id字段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE order_ (</span><br><span class="line">  id int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  orderCode varchar(255) DEFAULT NULL,</span><br><span class="line">  address varchar(255) DEFAULT NULL,</span><br><span class="line">  post varchar(255) DEFAULT NULL,</span><br><span class="line">  receiver varchar(255) DEFAULT NULL,</span><br><span class="line">  mobile varchar(255) DEFAULT NULL,</span><br><span class="line">  userMessage varchar(255) DEFAULT NULL,</span><br><span class="line">  createDate datetime DEFAULT NULL,</span><br><span class="line">  payDate datetime DEFAULT NULL,</span><br><span class="line">  deliveryDate datetime DEFAULT NULL,</span><br><span class="line">  confirmDate datetime DEFAULT NULL,</span><br><span class="line">  uid int(11) DEFAULT NULL,</span><br><span class="line">  status varchar(255) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (id),</span><br><span class="line">  CONSTRAINT fk_order_user FOREIGN KEY (uid) REFERENCES user (id)</span><br><span class="line">) ENGINE&#x3D;InnoDB  DEFAULT CHARSET&#x3D;utf8;</span><br></pre></td></tr></table></figure><ol start="12"><li>订单项表</li></ol><p>这个表是外键最多的一个表<br>外键pid，指向产品表id字段<br>外键oid，指向订单表id字段<br>外键uid，指向用户表id字段<br>number字段表示购买数量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE orderitem (</span><br><span class="line">  id int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  pid int(11) DEFAULT NULL,</span><br><span class="line">  oid int(11) DEFAULT NULL,</span><br><span class="line">  uid int(11) DEFAULT NULL,</span><br><span class="line">  number int(11) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (id),</span><br><span class="line">  CONSTRAINT fk_orderitem_user FOREIGN KEY (uid) REFERENCES user (id),</span><br><span class="line">  CONSTRAINT fk_orderitem_product FOREIGN KEY (pid) REFERENCES product (id),</span><br><span class="line">  CONSTRAINT fk_orderitem_order FOREIGN KEY (oid) REFERENCES order_ (id)</span><br><span class="line">) ENGINE&#x3D;InnoDB  DEFAULT CHARSET&#x3D;utf8;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      spring boot开发天猫
    
    </summary>
    
    
      <category term="项目开发" scheme="http://yoursite.com/categories/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="后端" scheme="http://yoursite.com/tags/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="工程" scheme="http://yoursite.com/tags/%E5%B7%A5%E7%A8%8B/"/>
    
      <category term="开发" scheme="http://yoursite.com/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="经验" scheme="http://yoursite.com/tags/%E7%BB%8F%E9%AA%8C/"/>
    
      <category term="项目" scheme="http://yoursite.com/tags/%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>刷题-acwing</title>
    <link href="http://yoursite.com/2019/12/23/acwing/"/>
    <id>http://yoursite.com/2019/12/23/acwing/</id>
    <published>2019-12-23T07:48:59.337Z</published>
    <updated>2020-01-05T01:41:14.135Z</updated>
    
    <content type="html"><![CDATA[<h2 id="acwing"><a href="#acwing" class="headerlink" title="acwing"></a>acwing</h2><hr><h3 id="（1）找到数组中重复的数字"><a href="#（1）找到数组中重复的数字" class="headerlink" title="（1）找到数组中重复的数字"></a>（1）找到数组中重复的数字</h3><p>给定一个长度为 n 的整数数组 nums，数组中所有的数字都在 0∼n−1 的范围内。</p><p>数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。</p><p>请找出数组中任意一个重复的数字。</p><p>注意：如果某些数字不在 0∼n−1 的范围内，或数组中不包含重复数字，则返回 -1；</p><h4 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h4><p>给定 nums = [2, 3, 5, 4, 3, 2, 6, 7]。</p><p>返回 2 或 3。</p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>首先判断数组所有的数字不小于0或者大于数组长度，然后循环数组，遍历每个数组元素，如果nums[i]不等于i,就将nums[i]和i上的数字交换，交换前判断是否和i上的数字相等，如果相等就返回，如果不相等就继续交换。</p><h4 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">duplicateInArray</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> len = nums.length;</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">           <span class="keyword">if</span>(nums[i] &lt; <span class="number">0</span> || nums[i] &gt; len - <span class="number">1</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">           <span class="keyword">while</span>(nums[i] != i)&#123;</span><br><span class="line">               <span class="keyword">if</span>(nums[i] == nums[nums[i]]) <span class="keyword">return</span> nums[i];</span><br><span class="line">               <span class="keyword">else</span>&#123;</span><br><span class="line">                   <span class="keyword">int</span> tmp = nums[i];</span><br><span class="line">                   nums[i] = nums[tmp];</span><br><span class="line">                   nums[tmp] = tmp;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><hr><h3 id="（2）不修改数组找出重复的数字"><a href="#（2）不修改数组找出重复的数字" class="headerlink" title="（2）不修改数组找出重复的数字"></a>（2）不修改数组找出重复的数字</h3><p>给定一个长度为 n+1 的数组nums，数组中所有的数均在 1∼n 的范围内，其中 n≥1。</p><p>请找出数组中任意一个重复的数，但不能修改输入的数组。</p><h4 id="样例-1"><a href="#样例-1" class="headerlink" title="样例"></a>样例</h4><p>给定 nums = [2, 3, 5, 4, 3, 2, 6, 7]。</p><p>返回 2 或 3。</p><h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><p>采用分治法，将每个数的取值的区间[1, n]划分成[1, n/2]和[n/2+1, n]两个子区间，然后分别统计两个区间中数的个数。注意<strong>这里的区间是指 数的取值范围，而不是 数组下标。</strong> 然后取数的个数大于区间长度的一半，最后返回r.</p><h4 id="源码-1"><a href="#源码-1" class="headerlink" title="源码"></a>源码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">duplicateInArray</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">1</span>, r = nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l &lt; r)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> s= <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> x : nums)&#123;</span><br><span class="line">                <span class="keyword">if</span>(x &lt;= mid &amp;&amp; x &gt;= l) s++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(s &gt; mid - l + <span class="number">1</span>) r = mid;</span><br><span class="line">            <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h3 id="（3）二维数组中的查找"><a href="#（3）二维数组中的查找" class="headerlink" title="（3）二维数组中的查找"></a>（3）二维数组中的查找</h3><p>在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。</p><p>请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p><h4 id="样例-2"><a href="#样例-2" class="headerlink" title="样例"></a>样例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">输入数组：</span><br><span class="line"></span><br><span class="line">[</span><br><span class="line">  [<span class="number">1</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">9</span>]，</span><br><span class="line">  [<span class="number">2</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">12</span>]，</span><br><span class="line">  [<span class="number">4</span>,<span class="number">7</span>,<span class="number">10</span>,<span class="number">13</span>]，</span><br><span class="line">  [<span class="number">6</span>,<span class="number">8</span>,<span class="number">11</span>,<span class="number">15</span>]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">如果输入查找数值为<span class="number">7</span>，则返回<span class="keyword">true</span>，</span><br><span class="line"></span><br><span class="line">如果输入查找数值为<span class="number">5</span>，则返回<span class="keyword">false</span>。</span><br></pre></td></tr></table></figure><h4 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h4><p>数组从上到下，从左到右是增大的，所以先取右上角数字x，如果和target相等，则返回，如果小于target，则排除这一行，枚举的点横坐标加一。如果大于target，则排除这一列，枚举的纵坐标减一。如果没有，返回false；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">searchArray</span><span class="params">(<span class="keyword">int</span>[][] array, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(array!=<span class="keyword">null</span> &amp;&amp; array.length &gt; <span class="number">0</span> &amp;&amp; array[<span class="number">0</span>].length &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">int</span> row = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> col = array[<span class="number">0</span>].length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(row &lt; array.length &amp;&amp; col &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(target == array[row][col]) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">             <span class="keyword">else</span> <span class="keyword">if</span>(target &lt; array[row][col]) col--;</span><br><span class="line">             <span class="keyword">else</span> row++;</span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="（4）从尾到头打印链表"><a href="#（4）从尾到头打印链表" class="headerlink" title="（4）从尾到头打印链表"></a>（4）从尾到头打印链表</h3><p>输入一个链表的头结点，按照 <strong>从尾到头</strong> 的顺序返回节点的值。</p><p>返回的结果用数组存储。</p><h4 id="样例-3"><a href="#样例-3" class="headerlink" title="样例"></a>样例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：[<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>]</span><br><span class="line">返回：[<span class="number">5</span>, <span class="number">3</span>, <span class="number">2</span>]</span><br></pre></td></tr></table></figure><h4 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h4><p>先将链表存入栈，然后将栈中元素放入链表，返回。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] printListReversingly(ListNode head) &#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; arr = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">    Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;Integer&gt;();</span><br><span class="line">  <span class="keyword">while</span>(head != <span class="keyword">null</span>)&#123;</span><br><span class="line">    stack.push(heda.val);</span><br><span class="line">    head = head.next;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span>(!stack.isEmpty())&#123;</span><br><span class="line">    arr.add(stack.pop());</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">int</span>[] arr1 = <span class="keyword">new</span> <span class="keyword">int</span>[arr.size()];<span class="comment">//因为不知道数组的大小，所以先存入arraylist，然后定义数组，存入其中</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; arr.size();i++)&#123;</span><br><span class="line">    arr1[i] = arr.get(i);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="（5）重建二叉树"><a href="#（5）重建二叉树" class="headerlink" title="（5）重建二叉树"></a>（5）重建二叉树</h3><p>输入一棵二叉树前序遍历和中序遍历的结果，请重建该二叉树。</p><p><strong>注意</strong>:</p><ul><li>二叉树中每个节点的值都互不相同；</li><li>输入的前序遍历和中序遍历一定合法；</li></ul><h4 id="样例-4"><a href="#样例-4" class="headerlink" title="样例"></a>样例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">给定：</span><br><span class="line">前序遍历是：[<span class="number">3</span>, <span class="number">9</span>, <span class="number">20</span>, <span class="number">15</span>, <span class="number">7</span>]</span><br><span class="line">中序遍历是：[<span class="number">9</span>, <span class="number">3</span>, <span class="number">15</span>, <span class="number">20</span>, <span class="number">7</span>]</span><br><span class="line"></span><br><span class="line">返回：[<span class="number">3</span>, <span class="number">9</span>, <span class="number">20</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="number">15</span>, <span class="number">7</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>]</span><br><span class="line">返回的二叉树如下所示：</span><br><span class="line">    <span class="number">3</span></span><br><span class="line">   / \</span><br><span class="line">  <span class="number">9</span>  <span class="number">20</span></span><br><span class="line">    /  \</span><br><span class="line">   <span class="number">15</span>   <span class="number">7</span></span><br></pre></td></tr></table></figure><h4 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h4><ol><li><p>先利用前序遍历找根节点：前序遍历的第一个数，就是根节点的值；</p></li><li><p>在中序遍历中找到根节点的位置 kk，则 kk 左边是左子树的中序遍历，右边是右子树的中序遍历；</p></li><li><p>假设左子树的中序遍历的长度是 ll，则在前序遍历中，根节点后面的 ll 个数，是左子树的前序遍历，剩下的数是右子树的前序遍历；</p></li><li><p>有了左右子树的前序遍历和中序遍历，我们可以先递归创建出左右子树，然后再创建根节点；</p></li></ol><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> TreeNode <span class="title">buildTree</span><span class="params">(<span class="keyword">int</span>[] preorder, <span class="keyword">int</span>[] inorder)</span> </span>&#123;</span><br><span class="line">      TreeNode root = re(preorder,<span class="number">0</span>,preorder.length - <span class="number">1</span>,inorder,<span class="number">0</span>,inorder.length - <span class="number">1</span>);</span><br><span class="line">      <span class="keyword">return</span> root;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> TreeNode <span class="title">re</span><span class="params">(<span class="keyword">int</span>[] pre,<span class="keyword">int</span> startpre,<span class="keyword">int</span> endpre,<span class="keyword">int</span>[] in,<span class="keyword">int</span> startin,<span class="keyword">int</span> endin)</span></span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(startpre &gt; endpre || startin &gt; endin)</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">      TreeNode root = <span class="keyword">new</span> TreeNode(pre[startpre]);</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = startin; i &lt;= endin; i++ )&#123;</span><br><span class="line">          <span class="keyword">if</span>(in[i] == pre[startpre])&#123;</span><br><span class="line">              root.left = re(pre,startpre+<span class="number">1</span>,startpre+i-startin,in,startin,i-<span class="number">1</span>);</span><br><span class="line">              root.right = re(pre,startpre+i-startin+<span class="number">1</span>,endpre,in,i+<span class="number">1</span>,endin);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> root;</span><br><span class="line">  </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="6-二叉树的下个节点"><a href="#6-二叉树的下个节点" class="headerlink" title="(6)二叉树的下个节点"></a>(6)二叉树的下个节点</h3><p>给定一棵二叉树的其中一个节点，请找出中序遍历序列的下一个节点。</p><p><strong>注意：</strong></p><ul><li>如果给定的节点是中序遍历序列的最后一个，则返回空节点;</li><li>二叉树一定不为空，且给定的节点一定不是空节点；</li></ul><h4 id="样例-5"><a href="#样例-5" class="headerlink" title="样例"></a>样例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">假定二叉树是：[<span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>]， 给出的是值等于<span class="number">2</span>的节点。</span><br><span class="line"></span><br><span class="line">则应返回值等于<span class="number">3</span>的节点。</span><br><span class="line"></span><br><span class="line">解释：该二叉树的结构如下，<span class="number">2</span>的后继节点是<span class="number">3</span>。</span><br><span class="line">  <span class="number">2</span></span><br><span class="line"> / \</span><br><span class="line"><span class="number">1</span>   <span class="number">3</span></span><br></pre></td></tr></table></figure><h4 id="思路-5"><a href="#思路-5" class="headerlink" title="思路"></a>思路</h4><p>分两种情况：</p><p>（1）给定节点有右节点，则为右节点的左儿子</p><p>（2）给定节点没有右节点，则找节点的父亲节点，如果为父亲节点的左儿子，则其父亲节点就是后继节点。</p><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> TreeNode <span class="title">inorderSuccessor</span><span class="params">(TreeNode p)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(p==<span class="keyword">null</span>)</span><br><span class="line">           <span class="keyword">return</span>  <span class="keyword">null</span>;</span><br><span class="line">      <span class="keyword">if</span>(p.right != <span class="keyword">null</span>)&#123;</span><br><span class="line">          p = p.right;</span><br><span class="line">          <span class="keyword">while</span>(p.left != <span class="keyword">null</span>)&#123;</span><br><span class="line">              p = p.left;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> p;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">while</span>(p.father !=<span class="keyword">null</span> &amp;&amp; p == p.father.right) p = p.father;</span><br><span class="line">      <span class="keyword">return</span> p.father;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="7-用两个栈实现队列"><a href="#7-用两个栈实现队列" class="headerlink" title="(7)用两个栈实现队列"></a>(7)用两个栈实现队列</h3><p>请用栈实现一个队列，支持如下四种操作：</p><ul><li>push(x) – 将元素x插到队尾；</li><li>pop() – 将队首的元素弹出，并返回该元素；</li><li>peek() – 返回队首元素；</li><li>empty() – 返回队列是否为空；</li></ul><p><strong>注意：</strong></p><ul><li>你只能使用栈的标准操作：<code>push to top</code>，<code>peek/pop from top</code>, <code>size</code> 和 <code>is empty</code>；</li><li>如果你选择的编程语言没有栈的标准库，你可以使用list或者deque等模拟栈的操作；</li><li>输入数据保证合法，例如，在队列为空时，不会进行<code>pop</code>或者<code>peek</code>等操作；</li></ul><h4 id="样例-6"><a href="#样例-6" class="headerlink" title="样例"></a>样例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">MyQueue queue = <span class="keyword">new</span> MyQueue();</span><br><span class="line"></span><br><span class="line">queue.push(<span class="number">1</span>);</span><br><span class="line">queue.push(<span class="number">2</span>);</span><br><span class="line">queue.peek();  <span class="comment">// returns 1</span></span><br><span class="line">queue.pop();   <span class="comment">// returns 1</span></span><br><span class="line">queue.empty(); <span class="comment">// returns false</span></span><br></pre></td></tr></table></figure><h4 id="思路-6"><a href="#思路-6" class="headerlink" title="思路"></a>思路</h4><p>pop是将元素放入第二个栈中，然后取出，返回。peek是将元素取出即可。</p><h4 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyQueue</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Initialize your data structure here. */</span></span><br><span class="line">    Stack&lt;Integer&gt; stck = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    Stack&lt;Integer&gt; cache = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Push element x to the back of queue. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        stck.push(x);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Removes the element from in front of queue and returns that element. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a;</span><br><span class="line">        <span class="keyword">if</span>(cache.empty())&#123;</span><br><span class="line">            <span class="keyword">while</span>(!stck.empty())&#123;</span><br><span class="line">            a = stck.peek();</span><br><span class="line">            stck.pop();</span><br><span class="line">            cache.push(a);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        a = cache.peek();</span><br><span class="line">        cache.pop();</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Get the front element. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> b;</span><br><span class="line">        <span class="keyword">if</span>(cache.empty())&#123;</span><br><span class="line">            <span class="keyword">while</span>(!stck.empty())&#123;</span><br><span class="line">            b = stck.peek();</span><br><span class="line">            stck.pop();</span><br><span class="line">            cache.push(b);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        b = cache.peek();</span><br><span class="line">               <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Returns whether the queue is empty. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">empty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stck.empty() &amp;&amp; cache.empty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MyQueue object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * MyQueue obj = new MyQueue();</span></span><br><span class="line"><span class="comment"> * obj.push(x);</span></span><br><span class="line"><span class="comment"> * int param_2 = obj.pop();</span></span><br><span class="line"><span class="comment"> * int param_3 = obj.peek();</span></span><br><span class="line"><span class="comment"> * boolean param_4 = obj.empty();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h3 id="8-斐波那且数列"><a href="#8-斐波那且数列" class="headerlink" title="(8)斐波那且数列"></a>(8)斐波那且数列</h3><p>输入一个整数 nn ，求斐波那契数列的第 nn 项。</p><p>假定从0开始，第0项为0。(nn&lt;=39)</p><h4 id="样例-7"><a href="#样例-7" class="headerlink" title="样例"></a>样例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入整数 n=<span class="number">5</span> </span><br><span class="line"></span><br><span class="line">返回 <span class="number">5</span></span><br></pre></td></tr></table></figure><h4 id="思路-7"><a href="#思路-7" class="headerlink" title="思路"></a>思路</h4><p>用两个变量滚动式得往后计算，aa 表示第 n−1n−1 项，bb 表示第 nn 项。<br>则令 c=a+bc=a+b 表示第 n+1n+1 项，然后让 a,ba,b 顺次往后移一位。</p><p>时间复杂度分析<br>总共需要计算 nn 次，所以时间复杂度是 O(n)O(n) 。</p><h4 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">Fibonacci</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">0</span>,b = <span class="number">1</span>,c = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(n &gt; <span class="number">0</span>)&#123;</span><br><span class="line">             c = a + b;</span><br><span class="line">            a = b;</span><br><span class="line">            b = c;</span><br><span class="line">            n --;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h3 id="（9）-旋转数组的最小数字"><a href="#（9）-旋转数组的最小数字" class="headerlink" title="（9） 旋转数组的最小数字"></a>（9） 旋转数组的最小数字</h3><p>把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。</p><p>输入一个升序的数组的一个旋转，输出旋转数组的最小元素。</p><p>例如数组{3,4,5,1,2}为{1,2,3,4,5}的一个旋转，该数组的最小值为1。</p><p>数组可能包含重复项。</p><p><strong>注意</strong>：数组内所含元素非负，若数组大小为0，请返回-1。</p><h4 id="样例-8"><a href="#样例-8" class="headerlink" title="样例"></a>样例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums=[<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">输出：<span class="number">0</span></span><br></pre></td></tr></table></figure><h4 id="思路-8"><a href="#思路-8" class="headerlink" title="思路"></a>思路</h4><p>二分) O(n)O(n)<br>为了便于分析，我们先将数组中的数画在二维坐标系中，横坐标表示数组下标，纵坐标表示数值，如下所示：</p><p>图中水平的实线段表示相同元素。</p><img src="https://www.acwing.com/media/article/image/2019/01/06/1_9f7a5ff011-2.png" alt="avatar" style="zoom:80%;" /><p>我们发现除了最后水平的一段（黑色水平那段）之外，其余部分满足二分性质：竖直虚线左边的数满足 nums[i]≥nums[0]nums[i]≥nums[0]；而竖直虚线右边的数不满足这个条件。<br>分界点就是整个数组的最小值。</p><p>所以我们先将最后水平的一段删除即可。</p><p>另外，不要忘记处理数组完全单调的特殊情况：</p><p>当我们删除最后水平的一段之后，如果剩下的最后一个数大于等于第一个数，则说明数组完全单调。<br>时间复杂度分析<br>二分的时间复杂度是 O(logn)O(logn)，删除最后水平一段的时间复杂度最坏是 O(n)O(n)，所以总时间复杂度是 O(n)O(n)。</p><h4 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findMin</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> n = nums.length - <span class="number">1</span>;</span><br><span class="line">       <span class="keyword">if</span>(n &lt;= <span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n; i++)&#123;</span><br><span class="line">           <span class="keyword">if</span>(nums[i] &lt; <span class="number">0</span>)</span><br><span class="line">           <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">while</span>(n &gt; <span class="number">0</span> &amp;&amp; nums[n] == nums[<span class="number">0</span>]) n--;</span><br><span class="line">       <span class="keyword">if</span> (nums[n] &gt;= nums[<span class="number">0</span>]) <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">       <span class="keyword">int</span> l = <span class="number">0</span>,r = n;</span><br><span class="line">       <span class="keyword">while</span>(l &lt; r)&#123;</span><br><span class="line">           <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">           <span class="keyword">if</span>(nums[mid] &lt; nums[<span class="number">0</span>]) r = mid;</span><br><span class="line">           <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> nums[r];</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="（10）矩阵中的路径"><a href="#（10）矩阵中的路径" class="headerlink" title="（10）矩阵中的路径"></a>（10）矩阵中的路径</h3><p>请设计一个函数，用来判断在一个矩阵中是否存在一条包含某字符串所有字符的路径。</p><p>路径可以从矩阵中的任意一个格子开始，每一步可以在矩阵中向左，向右，向上，向下移动一个格子。</p><p>如果一条路径经过了矩阵中的某一个格子，则之后不能再次进入这个格子。</p><p>注意：</p><p>输入的路径不为空；<br>所有出现的字符均为大写英文字母；</p><p>样例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">matrix=</span><br><span class="line">[</span><br><span class="line">  [<span class="string">"A"</span>,<span class="string">"B"</span>,<span class="string">"C"</span>,<span class="string">"E"</span>],</span><br><span class="line">  [<span class="string">"S"</span>,<span class="string">"F"</span>,<span class="string">"C"</span>,<span class="string">"S"</span>],</span><br><span class="line">  [<span class="string">"A"</span>,<span class="string">"D"</span>,<span class="string">"E"</span>,<span class="string">"E"</span>]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">str=<span class="string">"BCCE"</span> , <span class="keyword">return</span> <span class="string">"true"</span> </span><br><span class="line"></span><br><span class="line">str=<span class="string">"ASAE"</span> , <span class="keyword">return</span> <span class="string">"false"</span></span><br></pre></td></tr></table></figure><h4 id="思路-9"><a href="#思路-9" class="headerlink" title="思路"></a>思路</h4><p>采用回溯法，我们先枚举单词的起点，然后依次枚举单词的每个字母。<br>过程中需要将已经使用过的字母改成一个特殊字母，以避免重复使用字符。</p><h4 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasPath</span><span class="params">(<span class="keyword">char</span>[][] matrix, String str)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; matrix.length; i++)&#123;</span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; matrix[<span class="number">0</span>].length; j++)&#123;</span><br><span class="line">              <span class="keyword">if</span>(dfs(matrix,str,<span class="number">0</span>,i,j))</span><br><span class="line">              <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dfs</span><span class="params">(<span class="keyword">char</span>[][] matrix,String str,<span class="keyword">int</span> u,<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(matrix[x][y] != str.charAt(u)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">       <span class="keyword">if</span>(u == str.length() - <span class="number">1</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">       <span class="keyword">int</span>[] dx = &#123;-<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;, dy = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,-<span class="number">1</span>&#125;;</span><br><span class="line">       <span class="keyword">char</span> t = matrix[x][y];</span><br><span class="line">       matrix[x][y] = <span class="string">'*'</span>;</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>; i &lt; <span class="number">4</span>; i++)&#123;</span><br><span class="line">           <span class="keyword">int</span> a = x + dx[i], b = y + dy[i];</span><br><span class="line">           <span class="keyword">if</span>(a &gt;= <span class="number">0</span> &amp;&amp; a &lt; matrix.length &amp;&amp; b &gt;= <span class="number">0</span> &amp;&amp; b &lt; matrix[<span class="number">0</span>].length)&#123;</span><br><span class="line">           <span class="keyword">if</span>(dfs(matrix,str,u + <span class="number">1</span>,a,b)) <span class="keyword">return</span> <span class="keyword">true</span>;&#125;</span><br><span class="line">       &#125;</span><br><span class="line">       matrix[x][y] = t;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="（11）机器人的运动范围"><a href="#（11）机器人的运动范围" class="headerlink" title="（11）机器人的运动范围"></a>（11）机器人的运动范围</h3><p>地上有一个 m 行和 n 列的方格，横纵坐标范围分别是 0∼m−1 和 0∼n−1。</p><p>一个机器人从坐标0,0的格子开始移动，每一次只能向左，右，上，下四个方向移动一格。</p><p>但是不能进入行坐标和列坐标的数位之和大于 k 的格子。</p><p>请问该机器人能够达到多少个格子？</p><p>样例1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">输入：k=<span class="number">7</span>, m=<span class="number">4</span>, n=<span class="number">5</span></span><br><span class="line"></span><br><span class="line">输出：<span class="number">20</span></span><br><span class="line">样例<span class="number">2</span></span><br><span class="line">输入：k=<span class="number">18</span>, m=<span class="number">40</span>, n=<span class="number">40</span></span><br><span class="line"></span><br><span class="line">输出：<span class="number">1484</span></span><br><span class="line"></span><br><span class="line">解释：当k为<span class="number">18</span>时，机器人能够进入方格（<span class="number">35</span>,<span class="number">37</span>），因为<span class="number">3</span>+<span class="number">5</span>+<span class="number">3</span>+<span class="number">7</span> = <span class="number">18</span>。</span><br><span class="line">      但是，它不能进入方格（<span class="number">35</span>,<span class="number">38</span>），因为<span class="number">3</span>+<span class="number">5</span>+<span class="number">3</span>+<span class="number">8</span> = <span class="number">19</span>。</span><br><span class="line">注意:</span><br><span class="line"></span><br><span class="line"><span class="number">0</span>&lt;=m&lt;=<span class="number">50</span></span><br><span class="line"><span class="number">0</span>&lt;=n&lt;=<span class="number">50</span></span><br><span class="line"><span class="number">0</span>&lt;=k&lt;=<span class="number">100</span></span><br></pre></td></tr></table></figure><h4 id="思路-10"><a href="#思路-10" class="headerlink" title="思路"></a>思路</h4><p>建一个标记数组，标记每个位置是否访问过，新建一个类，存入横纵坐标，首先放入（0，0）位置到linkedlist，然后判断其临近的四个位置上的，是否满足在界限内，没访问过，位数上的数字之和小于给定的值，如果满足，将其放入队列，总数加一。</p><h4 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pair</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> x;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> y;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Pair</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.x = x;</span><br><span class="line">            <span class="keyword">this</span>.y = y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">movingCount</span><span class="params">(<span class="keyword">int</span> threshold, <span class="keyword">int</span> rows, <span class="keyword">int</span> cols)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">     <span class="keyword">if</span>(rows &lt;= <span class="number">0</span> || cols &lt;=<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">     <span class="keyword">boolean</span>[][] vis = <span class="keyword">new</span> <span class="keyword">boolean</span>[rows][cols];</span><br><span class="line">     LinkedList&lt;Pair&gt; list = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">     list.add(<span class="keyword">new</span> Pair(<span class="number">0</span>,<span class="number">0</span>));</span><br><span class="line">     vis[<span class="number">0</span>][<span class="number">0</span>] = <span class="keyword">true</span>;</span><br><span class="line">     <span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line">     <span class="keyword">int</span>[] dx = &#123; -<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span> &#125;;</span><br><span class="line">     <span class="keyword">int</span>[] dy = &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span> &#125;;</span><br><span class="line">     <span class="keyword">while</span>(list.size() != <span class="number">0</span>)&#123;</span><br><span class="line">         Pair pair = list.remove();</span><br><span class="line">         <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">4</span>;i++)&#123;</span><br><span class="line">             <span class="keyword">int</span> xx = pair.x + dx[i];</span><br><span class="line">             <span class="keyword">int</span> yy = pair.y + dy[i];</span><br><span class="line">             <span class="keyword">if</span>(xx &gt;=<span class="number">0</span> &amp;&amp; yy &gt;= <span class="number">0</span> &amp;&amp; xx &lt;rows &amp;&amp; yy &lt; cols &amp;&amp; !vis[xx][yy])&#123;</span><br><span class="line">             <span class="keyword">if</span>((xx/<span class="number">10</span> + xx%<span class="number">10</span> + yy/<span class="number">10</span> + yy%<span class="number">10</span>) &lt;= threshold)&#123;</span><br><span class="line">                 list.add(<span class="keyword">new</span> Pair(xx,yy));</span><br><span class="line">                 res++;</span><br><span class="line">             &#125;</span><br><span class="line">             vis[xx][yy] = <span class="keyword">true</span>;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="12-剪绳子"><a href="#12-剪绳子" class="headerlink" title="(12) 剪绳子"></a>(12) 剪绳子</h3><p>给你一根长度为 n 绳子，请把绳子剪成 m 段（m、n 都是整数，2≤n≤58 并且 m≥2）。</p><p>每段的绳子的长度记为k[0]、k[1]、……、k[m]。k[0]k[1] … k[m] 可能的最大乘积是多少？</p><p>例如当绳子的长度是8时，我们把它剪成长度分别为2、3、3的三段，此时得到最大的乘积18。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">样例</span><br><span class="line">输入：<span class="number">8</span></span><br><span class="line"></span><br><span class="line">输出：<span class="number">18</span></span><br></pre></td></tr></table></figure><h4 id="思路-11"><a href="#思路-11" class="headerlink" title="思路"></a>思路</h4><p>(数学) O(n)O(n)<br>这道题目是数学中一个很经典的问题。<br>下面我们给出证明：</p><p>首先把一个正整数 NN 拆分成若干正整数只有有限种拆法，所以存在最大乘积。<br>假设 N=n1+n2+…+nkN=n1+n2+…+nk，并且 n1×n2×…×nkn1×n2×…×nk 是最大乘积。</p><p>显然1不会出现在其中；<br>如果对于某个 ii 有 ni≥5ni≥5，那么把 nini 拆分成 3+(ni−3)3+(ni−3)，我们有 3(ni−3)=3ni−9&gt;ni3(ni−3)=3ni−9&gt;ni；<br>如果 ni=4ni=4，拆成 2+22+2乘积不变，所以不妨假设没有4；<br>如果有三个以上的2，那么 3×3&gt;2×2×23×3&gt;2×2×2，所以替换成3乘积更大；<br>综上，选用尽量多的3，直到剩下2或者4时，用2。</p><p>时间复杂度分析：当 nn 比较大时，nn 会被拆分成 ⌈n/3⌉⌈n/3⌉ 个数，我们需要计算这么多次减法和乘法，所以时间复杂度是 O(n)O(n)。</p><h4 id="代码-8"><a href="#代码-8" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProductAfterCutting</span><span class="params">(<span class="keyword">int</span> length)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(length &lt;= <span class="number">3</span>)  <span class="keyword">return</span> (length -<span class="number">1</span>) * <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(length % <span class="number">3</span> == <span class="number">1</span>)  &#123;length = length -<span class="number">4</span>;res = <span class="number">4</span>;&#125;</span><br><span class="line">    <span class="keyword">if</span>(length % <span class="number">3</span> == <span class="number">2</span>)  &#123;length = length -<span class="number">2</span>;res = <span class="number">2</span>;&#125;</span><br><span class="line">    <span class="keyword">while</span>(length &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        res = res *<span class="number">3</span>;</span><br><span class="line">        length = length -<span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="（13）二进制中1的个数"><a href="#（13）二进制中1的个数" class="headerlink" title="（13）二进制中1的个数"></a>（13）二进制中1的个数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">输入一个<span class="number">32</span>位整数，输出该数二进制表示中<span class="number">1</span>的个数。</span><br><span class="line"></span><br><span class="line">注意：</span><br><span class="line"></span><br><span class="line">负数在计算机中用其绝对值的补码来表示。</span><br><span class="line">样例<span class="number">1</span></span><br><span class="line">输入：<span class="number">9</span></span><br><span class="line">输出：<span class="number">2</span></span><br><span class="line">解释：<span class="number">9</span>的二进制表示是<span class="number">1001</span>，一共有<span class="number">2</span>个<span class="number">1</span>。</span><br><span class="line">样例<span class="number">2</span></span><br><span class="line">输入：-<span class="number">2</span></span><br><span class="line">输出：<span class="number">31</span></span><br><span class="line">解释：-<span class="number">2</span>在计算机里会被表示成<span class="number">11111111111111111111111111111110</span>，</span><br><span class="line">      一共有<span class="number">31</span>个<span class="number">1</span>。</span><br></pre></td></tr></table></figure><h4 id="思路-12"><a href="#思路-12" class="headerlink" title="思路"></a>思路</h4><p>（1）是将1左移，与n做&amp;操作，如果不等于0，则加一。知道将1左移变为了0；<br>（2）n与n-1做与操作，每次减去最右边的1，知道变为了0；</p><h4 id="代码-9"><a href="#代码-9" class="headerlink" title="代码"></a>代码</h4><pre><code class="java"><span class="comment">//方法一</span><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">NumberOf1</span><span class="params">(<span class="keyword">int</span> n)</span></span><span class="function">    </span>{        <span class="keyword">int</span> count = <span class="number">0</span>;        <span class="keyword">int</span> flag = <span class="number">1</span>;        <span class="keyword">while</span>(flag != <span class="number">0</span>){            <span class="keyword">if</span>((n &amp; flag) != <span class="number">0</span>){                count++;            }            flag = flag &lt;&lt; <span class="number">1</span>;        }        <span class="keyword">return</span> count;    }<span class="comment">//方法二</span>        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">NumberOf1</span><span class="params">(<span class="keyword">int</span> n)</span></span><span class="function">    </span>{       <span class="keyword">int</span> res = <span class="number">0</span>;       <span class="keyword">while</span>(n != <span class="number">0</span>){           n = n &amp; (n -<span class="number">1</span>);           res++;       }       <span class="keyword">return</span> res;    }</code></pre>]]></content>
    
    <summary type="html">
    
      acwing题目
    
    </summary>
    
    
      <category term="刷题" scheme="http://yoursite.com/categories/%E5%88%B7%E9%A2%98/"/>
    
    
      <category term="acwing" scheme="http://yoursite.com/tags/acwing/"/>
    
      <category term="刷题" scheme="http://yoursite.com/tags/%E5%88%B7%E9%A2%98/"/>
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="后端" scheme="http://yoursite.com/tags/%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>No1</title>
    <link href="http://yoursite.com/2019/12/23/No1-1/"/>
    <id>http://yoursite.com/2019/12/23/No1-1/</id>
    <published>2019-12-23T02:34:06.302Z</published>
    <updated>2019-12-23T05:35:51.869Z</updated>
    
    <content type="html"><![CDATA[<h2 id="发文模板"><a href="#发文模板" class="headerlink" title="发文模板"></a>发文模板</h2><h3 id="增加description，可现实“阅读全文”"><a href="#增加description，可现实“阅读全文”" class="headerlink" title="增加description，可现实“阅读全文”"></a>增加description，可现实“阅读全文”</h3>]]></content>
    
    <summary type="html">
    
      我的第一篇文章
    
    </summary>
    
    
      <category term="成长" scheme="http://yoursite.com/categories/%E6%88%90%E9%95%BF/"/>
    
    
      <category term="琐碎" scheme="http://yoursite.com/tags/%E7%90%90%E7%A2%8E/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/12/23/hello-world/"/>
    <id>http://yoursite.com/2019/12/23/hello-world/</id>
    <published>2019-12-23T01:25:34.777Z</published>
    <updated>2019-12-23T06:36:36.340Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.
    
    </summary>
    
    
      <category term="成长" scheme="http://yoursite.com/categories/%E6%88%90%E9%95%BF/"/>
    
    
      <category term="琐碎" scheme="http://yoursite.com/tags/%E7%90%90%E7%A2%8E/"/>
    
  </entry>
  
</feed>
